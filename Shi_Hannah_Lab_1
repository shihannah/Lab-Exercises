#Question 1
word_list = ["apple", "chestnut", "gargoyle", "pandas", "sheep", "raptor"]
longest_word = max(word_list, key = len) #max() function returns largest item
print(longest_word) #prints longest word in given list

#used https://www.w3schools.com/python/ref_func_max.asp to understand max() function


#Question 2

import random
word_list2 = []
def pick_word(): #craeting function to pick word from txt file
    with open("/Users/hannahshi/Desktop/harp 151/1-1000.txt") as words_file: #import txt file
        words = words_file.readlines() #reading txt file
        words_file.close()
        return random.choice(words).strip() #randomly chooses words from txt file
for i in range (0,7):
    word = pick_word()
    if word not in word_list2:
        word_list2.append(word)
        
print(word_list2)
longest_word2 = max(word_list2, key = len) 
print(longest_word2)


#Question 3 #not sure how to get this to work
class dict_functions:
    
    def __init__(states, abbrev_dict, dict_key): #set parameters
        states.abbrev_dict = abbrev_dict
        states.dict_key = dict_key
    
    def return_values(states): #returns list of dictionary values
        values_list = states.abbrev_dict.values()
        print(values_list)
        
    def get_value(states): #returns the value of the specified key
        return_value = states.abbrev_dict.get(states.dict_key)
        print(return_value)
        
    def remove(states): #removes indicated key-value pair
        remove_pair = states.abbrev_dict.pop(states.dict_key) #removes specified key and it's value from dictionary
        print(remove_pair)
    
    def clear(states): #clears dict
        clear_dict = states.abbrev_dict.clear()
        print(clear_dict)
    
s1 = dict_functions({"NY": "New York", "CA": "California", "MA": "Massachusetts", "WA": "Washington", "PA": "Pennsylvania", "MI": "Michigan"}, "NY")
s1.return_values
s1.get_value
s1.remove
s1.clear


#Question 4
class Student:
    def __init__(self, full_name, student_ID, total_classes_taken, grade_dict): #parameters consist of components of student records
        self.name = full_name
        self.ID = student_ID
        self.classes = total_classes_taken
        self.grades = grade_dict
        
    def StudentProfile(self): #prints student name and ID
        print(f"Student Name: " + self.name + ", Student ID: " + self.ID)
    
    def total_credits(self): #calculates total credits and classifies a student as frshman, sophomore, junior, or senior
        credits = self.classes*4 #each course is 4 credits
        print(f"Total Credits Taken: {credits}")
        if 0 <= credits <= 32:
            print("Student Year: Freshman")
        elif 33 <= credits <= 64:
            print("Student Year: Sophomore")
        elif 65 <= credits <= 96:
            print("Student Year: Junior")
        elif 97 <= credits <= 128:
            print("Student Year: Senior")
                
    def semester_avg(self): #prints the students semester average
        total = sum(self.grades.values())
        num_classes = len(self.grades)
        average = total/num_classes
        print(f"Semester Average: {average}")
    
Student001 = Student("Hannah Shi", "B00909398", 16, {"chemistry":97, "anthropology": 99, "statistics": 94, "history": 97})
Student001.StudentProfile()
Student001.total_credits()
Student001.semester_avg()

#This system allows you to view a student's basic school information. I first created a class and several parameters representing name, ID, the total number of courses the student has taken, and their current grades. Then, I defined a function that would print a simple student introduction consisting of their full name and student ID. After, I created a function that would calculate the total credits the student has using the number of classes they have taken. Each course is 4 credits so I multiplied the total number of classes by 4. With the result, I used conditional statements to determine what year the student is based on their credits. Lastly, I created a function to calculate the student's current semester average. I input a grade dictionary in the perameters and calculated the averages of the values of the dictionary.


#Question 5 #used class examples and some elements from https://www.youtube.com/watch?v=JNXmCOumNw0
word_list = ["column", "star", "gather", "plane", "party", "found", "clean", "chart", "chowder", "city", "liar", "pouring"] #list of words to choose from
import random

def choose_word(): #function to choose random word
    word = random.choice(word_list)
    return word.upper() #makes word uppercase

def game(word): #create function for actual game play
    word_length = len(word) 
    guessed = False
    guessed_letters = [] #empty list for guessed letters
    guesses = 6 #6 guesses for each body part
    print("Let's play a game of hangman!") #introduction
    print("\n")
    while not guessed and guesses > 0:
        guess = input("Guess a letter: ")
        if len(guess) == 1 and guess.isalpha(): #learned about .isalpha from https://www.w3schools.com/python/ref_string_isalpha.asp#:~:text=The%20isalpha()%20method%20returns,are%20alphabet%20letters%20(a%2Dz).
            if guess in guessed_letters:
                print("You already guessed the letter", guess)
            elif guess not in word:
                print(guess, "isn't in the word.")
                guesses -= 1
                guessed_letters.append(guess)
            else:
                print("Yay!", guess, "is in the word!")
                guessed_letters.append(guess)
        else:
            print("Guess invalid.")
            print("\n")
        if guessed:
            print(" You win! You've guessed all the letters! The word is " + word + ".")
        elif guesses == 0:
            print("You've ran out of guesses. The word was " + word + ". Better luck next time!")

def main(): #function puts both components of game together
    word = choose_word()
    game(word)
        
main()